import os
import json
import re
import random
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)



load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN = os.getenv("TOKEN")  # –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
MODES = {
    "exam": {
        "name": "–≠–∫–∑–∞–º–µ–Ω",
        "questions": 20,
        "description": "–†–µ–∂–∏–º –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ (20 –≤–æ–ø—Ä–æ—Å–æ–≤)",
    },
    "express": {
        "name": "–≠–∫—Å–ø—Ä–µ—Å—Å",
        "questions": 10,
        "description": "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π (10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)",
    },
    "marathon": {
        "name": "–ú–∞—Ä–∞—Ñ–æ–Ω",
        "questions": 100,
        "description": "–í—Å–µ –±–∏–ª–µ—Ç—ã –ø–æ–¥—Ä—è–¥ (100 –≤–æ–ø—Ä–æ—Å–æ–≤)",
    },
}


class UserState:
    def __init__(self):
        self.current_mode = "exam"
        self.current_ticket = 1
        self.current_question = 0
        self.score = 0
        self.answers_history = []
        self.questions_order = []


users_state = {}


def get_user_state(user_id):
    if user_id not in users_state:
        users_state[user_id] = UserState()
    return users_state[user_id]


def load_tickets():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


tickets_data = load_tickets()


def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not text:
        return ""

    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    text = re.sub(r"<[^>]+>", "", text)
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "1. 1. –¢–µ–∫—Å—Ç" -> "1. –¢–µ–∫—Å—Ç")
    text = re.sub(r"(\d+)\.\s*\1\.?", r"\1.", text)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = " ".join(text.split())
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç—ã –ü–î–î
    text = re.sub(r"(–ü—É–Ω–∫—Ç)(\d+\.\d+)", r"\1 \2", text)
    return text


def clean_explanation(explanation):
    """–û—á–∏—Å—Ç–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –ø—É–Ω–∫—Ç—ã –ü–î–î"""
    if not explanation:
        return ""

    # –£–¥–∞–ª—è–µ–º "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç" –∏ "–í–æ–ø—Ä–æ—Å ‚Ññ" —á–∞—Å—Ç–∏
    explanation = re.sub(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:.*$", "", explanation, flags=re.MULTILINE)
    explanation = re.sub(r"–í–æ–ø—Ä–æ—Å ‚Ññ.*$", "", explanation, flags=re.MULTILINE)

    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    explanation = re.sub(r"<[^>]+>", "", explanation)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ –ü–î–î –∏ —Ç–µ–∫—Å—Ç–æ–º
    explanation = re.sub(r"(\d+\.\d+)([–ê-–Ø–∞-—è])", r"\1 \2", explanation)
    explanation = re.sub(r"([–ê-–Ø–∞-—è])(\d+\.\d+)", r"\1 \2", explanation)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞–∫–∏ –ü–î–î (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
    explanation = re.sub(r"([–ê-–Ø–∞-—è])-(\d+\.\d+)", r"\1 - \2", explanation)
    explanation = re.sub(r"([–ê-–Ø–∞-—è])(¬´)", r"\1 \2", explanation)
    explanation = re.sub(r"(¬ª)([–ê-–Ø–∞-—è])", r"\1 \2", explanation)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    sentences = [
        s.strip() for s in re.split(r"(?<=[.!?])\s+", explanation) if s.strip()
    ]
    explanation = "\n\n".join(sentences)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –ø–µ—Ä–µ–¥ –ø—É–Ω–∫—Ç–∞–º–∏
    explanation = re.sub(r"(–ü—É–Ω–∫—Ç \d+\.\d+ –ü–î–î)", r"\nüîπ \1\n", explanation)

    return explanation


def get_next_question(state):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
    if state.current_mode == "exam":
        ticket = next(
            (
                t
                for t in tickets_data
                if int(t["ticket_number"]) == state.current_ticket
            ),
            None,
        )
        if ticket and state.current_question < len(ticket["questions"]):
            return ticket["questions"][state.current_question]

    elif state.current_mode in ["express", "marathon"]:
        if not state.questions_order:
            all_questions = []
            for ticket in tickets_data:
                all_questions.extend(ticket["questions"])
            random.shuffle(all_questions)
            state.questions_order = all_questions[
                : MODES[state.current_mode]["questions"]
            ]

        if state.current_question < len(state.questions_order):
            return state.questions_order[state.current_question]
    return None


def get_current_question(state):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    if state.current_mode == "exam":
        ticket = next(
            (
                t
                for t in tickets_data
                if int(t["ticket_number"]) == state.current_ticket
            ),
            None,
        )
        if ticket and state.current_question < len(ticket["questions"]):
            return ticket["questions"][state.current_question]
    elif state.current_mode in ["express", "marathon"]:
        if state.questions_order and state.current_question < len(
            state.questions_order
        ):
            return state.questions_order[state.current_question]
    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    help_text = """
üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ü–î–î!</b>

üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/exam - –ü–æ–ª–Ω—ã–π –±–∏–ª–µ—Ç (20 –≤–æ–ø—Ä–æ—Å–æ–≤)
/express - –≠–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç (10 –≤–æ–ø—Ä–æ—Å–æ–≤) 
/marathon - –ú–∞—Ä–∞—Ñ–æ–Ω (100 –≤–æ–ø—Ä–æ—Å–æ–≤)
/ticket - –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∏–ª–µ—Ç
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

üìå <b>–†–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
"""
    for mode, info in MODES.items():
        help_text += f"- <i>{info['name']}</i>: {info['description']}\n"

    keyboard = [
        [InlineKeyboardButton("üìö –ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω", callback_data="mode_exam")],
        [InlineKeyboardButton("‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç", callback_data="mode_express")],
        [InlineKeyboardButton("üèÅ –ú–∞—Ä–∞—Ñ–æ–Ω", callback_data="mode_marathon")],
        [InlineKeyboardButton("üîé –í—ã–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="select_ticket")],
    ]
    await update.message.reply_text(
        help_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML"
    )


async def exam_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exam"""
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    state.current_mode = "exam"
    await start_exam(update, context)


async def express_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /express"""
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    state.current_mode = "express"
    await start_exam(update, context)


async def marathon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /marathon"""
    user_id = update.effective_user.id
    state = get_user_state(user_id)
    state.current_mode = "marathon"
    await start_exam(update, context)


async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    state = get_user_state(user_id)
    mode = query.data.split("_")[1]
    state.current_mode = mode
    state.current_question = 0
    state.score = 0
    state.answers_history = []
    state.questions_order = []

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: <b>{MODES[mode]['name']}</b>\n{MODES[mode]['description']}",
        parse_mode="HTML",
    )
    await start_exam(update, context)


async def select_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –±–∏–ª–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∏–ª–µ—Ç–∞–º–∏ (–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 5 –≤ —Ä—è–¥)
    keyboard = []
    row = []
    for i in range(1, 41):  # 40 –±–∏–ª–µ—Ç–æ–≤
        row.append(InlineKeyboardButton(f"–ë–∏–ª–µ—Ç {i}", callback_data=f"ticket_{i}"))
        if len(row) == 5:
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

    await query.edit_message_text(
        text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def set_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    state = get_user_state(user_id)
    ticket_number = int(query.data.split("_")[1])

    state.current_ticket = ticket_number
    state.current_mode = "exam"  # –†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–∏–ª–µ—Ç—É
    state.current_question = 0
    state.score = 0
    state.answers_history = []
    state.questions_order = []

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–í—ã–±—Ä–∞–Ω –±–∏–ª–µ—Ç ‚Ññ{ticket_number}. –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!",
        parse_mode="HTML",
    )
    await start_exam(update, context)


async def start_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    state = get_user_state(user_id)

    state.current_question = 0
    state.score = 0
    state.answers_history = []

    await show_question(update, context)


async def show_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
    user_id = update.effective_user.id
    state = get_user_state(user_id)

    question = get_next_question(state)
    if not question:
        await finish_exam(update, context)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    answers_text = "\n".join(
        [
            f"{i}. {clean_text(answer['text']).lstrip(f'{i}.').strip()}"
            for i, answer in enumerate(question["answers"], 1)
        ]
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton(
                str(i), callback_data=f"answer_{i-1}_{state.current_question}"
            )
            for i in range(1, len(question["answers"]) + 1)
        ],
        [
            InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_question"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", callback_data="cancel_exam"),
        ],
    ]

    question_text = (
        f"üìå –í–æ–ø—Ä–æ—Å {state.current_question + 1}/{MODES[state.current_mode]['questions']}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{clean_text(question['question_text'])}\n\n"
        f"üîπ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {question.get('error_rate', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n"
        f"{answers_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
    if question.get("image"):
        try:
            with open(os.path.join("data", question["image"]), "rb") as photo:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=photo,
                    caption=question_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML",
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await send_question(update, context, question_text, keyboard)
    else:
        await send_question(update, context, question_text, keyboard)


async def send_question(
    update: Update, context: ContextTypes.DEFAULT_TYPE, text, keyboard
):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    state = get_user_state(user_id)

    if query.data.startswith("skip_question"):
        await handle_skip_question(update, context)
        return

    _, answer_idx, _ = query.data.split("_")
    answer_idx = int(answer_idx)

    question = get_current_question(state)
    is_correct = question["answers"][answer_idx]["is_correct"]
    state.answers_history.append((state.current_question + 1, is_correct))

    if is_correct:
        state.score += 1
        feedback = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>"
    else:
        feedback = (
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            f"üìò <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b>\n{clean_explanation(question['explanation'])}"
        )

    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=feedback, parse_mode="HTML"
    )

    state.current_question += 1
    if state.current_question < MODES[state.current_mode]["questions"]:
        await show_question(update, context)
    else:
        await finish_exam(update, context)


async def handle_skip_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    state = get_user_state(user_id)

    state.current_question += 1
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚è≠ <b>–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω</b>",
        parse_mode="HTML",
    )
    await show_question(update, context)


async def cancel_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    state = get_user_state(user_id)

    correct = sum(1 for _, correct in state.answers_history if correct)
    total = len(state.answers_history)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct}/{total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
        parse_mode="HTML",
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.current_question = 0
    state.score = 0
    state.answers_history = []
    state.questions_order = []

    await start(query, context)


async def finish_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    user_id = update.effective_user.id
    state = get_user_state(user_id)

    result_text = (
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã {MODES[state.current_mode]['name']}:</b>\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö:</b> {state.score}/{MODES[state.current_mode]['questions']}\n"
        f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {state.score/MODES[state.current_mode]['questions']*100:.1f}%\n\n"
    )

    if state.score / MODES[state.current_mode]["questions"] < 0.7:
        result_text += "üîª <b>–ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª!</b>"
    else:
        result_text += "üîπ <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>"

    keyboard = [
        [
            InlineKeyboardButton(
                "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"mode_{state.current_mode}"
            ),
            InlineKeyboardButton("üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
        ],
        [
            InlineKeyboardButton(
                "‚ö° –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º", callback_data="select_mode"
            ),
            InlineKeyboardButton("üîé –í—ã–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç", callback_data="select_ticket"),
        ],
    ]

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=result_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
    )


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await start(query, context)


async def select_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üìö –≠–∫–∑–∞–º–µ–Ω (20 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="mode_exam")],
        [
            InlineKeyboardButton(
                "‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å (10 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="mode_express"
            )
        ],
        [
            InlineKeyboardButton(
                "üèÅ –ú–∞—Ä–∞—Ñ–æ–Ω (100 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="mode_marathon"
            )
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")],
    ]

    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await start(update, context)


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = update.effective_user.id
    state = get_user_state(user_id)

    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üîπ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {MODES[state.current_mode]['name']}\n"
        f"üîπ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {state.score}\n"
        f"üîπ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(state.answers_history)}\n"
    )

    if state.answers_history:
        correct = sum(1 for _, correct in state.answers_history if correct)
        stats_text += (
            f"üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct/len(state.answers_history)*100:.1f}%\n"
        )

    await update.message.reply_text(stats_text, parse_mode="HTML")


async def ticket_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ticket"""
    keyboard = [
        [InlineKeyboardButton(f"–ë–∏–ª–µ—Ç {i}", callback_data=f"ticket_{i}")]
        for i in range(1, 41)  # 40 –±–∏–ª–µ—Ç–æ–≤
    ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 5 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    grouped_keyboard = [keyboard[i : i + 5] for i in range(0, len(keyboard), 5)]
    grouped_keyboard.append(
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç:", reply_markup=InlineKeyboardMarkup(grouped_keyboard)
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /start"
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not tickets_data:
        print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–æ–≤!")
        return

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tickets_data)} –±–∏–ª–µ—Ç–æ–≤")

    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("exam", exam_command))
    application.add_handler(CommandHandler("express", express_command))
    application.add_handler(CommandHandler("marathon", marathon_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("ticket", ticket_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(set_mode, pattern=r"^mode_"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern=r"^answer_"))
    application.add_handler(
        CallbackQueryHandler(handle_skip_question, pattern=r"^skip_question")
    )
    application.add_handler(CallbackQueryHandler(main_menu, pattern=r"^main_menu$"))
    application.add_handler(CallbackQueryHandler(select_mode, pattern=r"^select_mode$"))
    application.add_handler(CallbackQueryHandler(cancel_exam, pattern=r"^cancel_exam$"))
    application.add_handler(
        CallbackQueryHandler(select_ticket, pattern=r"^select_ticket$")
    )
    application.add_handler(CallbackQueryHandler(set_ticket, pattern=r"^ticket_\d+$"))

    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
